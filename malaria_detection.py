# -*- coding: utf-8 -*-
"""malaria_detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-O4UDErjYHiTh4j5L2InOuwD5j7WjLBx

kaggle API
"""

#import os
#os.environ ['KAGGLE_CONFIG_DIR']= '/content'

#!kaggle datasets download -d iarunava/cell-images-for-detecting-malaria

#!unzip \*.zip && rm *.zip

"""importing libraries"""

import numpy as np
import pandas as pd
import cv2
import matplotlib.pyplot as plt
from PIL import Image
import os
print(os.listdir("/content/Untitled Folder"))

"""plotting parasitized and uninfected image"""

data1 = cv2.imread("/content/cell_images/Parasitized/C100P61ThinF_IMG_20150918_144104_cell_162.png")
plt.subplot(1,2,1)
plt.imshow(data1)
plt.axis("off")
plt.title("Parasitized")
data1 = cv2.imread("/content/cell_images/Uninfected/C100P61ThinF_IMG_20150918_144104_cell_128.png")
plt.subplot(1,2,2)
plt.imshow(data1)
plt.axis("off")
plt.title("Uninfected")
plt.show()

"""Data preprocessing and Data SEGMENTATION"""

x = list()
y = list()
for i in os.listdir("/content/Untitled Folder/cell_images/Parasitized"): 
    if ".png" in i: #because there are Thumbs.db file in cell_images file
        path = "/content/Untitled Folder/cell_images/Parasitized/"+i
        img = plt.imread(path)
        img = cv2.resize(img,(40,40))
        x.append(img)
        y.append(1) 
for i in os.listdir("/content/Untitled Folder/cell_images/Uninfected/"):
    if ".png" in i:
        path = "/content/Untitled Folder/cell_images/Uninfected/"+i
        img = plt.imread(path)
        img = cv2.resize(img,(40,40))
        x.append(img)
        y.append(0)
x = np.array(x)

"""create 4 subplots and plot 4 random image """

plt.subplot(1,4,1)
plt.imshow(x[2000]) # image 1
plt.title(y[2000]) # title label
plt.axis("off")
plt.subplot(1,4,2) # image 2
plt.imshow(x[22000])
plt.title(y[22000])
plt.axis("off")
plt.subplot(1,4,3) #image 3
plt.imshow(x[20000])
plt.title(y[20000])
plt.axis("off")
plt.subplot(1,4,4) #image 4 
plt.imshow(x[200])
plt.title(y[200])
plt.axis("off")
plt.show()

"""reshapeing data"""

x = x.reshape(x.shape[0],x.shape[1]*x.shape[2]*x.shape[3])
x = x**8

"""Data splitting"""

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.3,random_state = 42)

"""plot based on x_train

"""

img1 =x_train[500].reshape(40,40,3) #reshape for normal image shape
img2 =x_train[100].reshape(40,40,3)
plt.subplot(1,2,1)
plt.imshow(img1)
plt.axis("off")
plt.title(y_train[900])
plt.subplot(1,2,2)
plt.imshow(img2)
plt.axis("off")
plt.title(y_train[100])
plt.show()

"""Logistic Regression model

build
"""

from sklearn.linear_model import LogisticRegression
lr = LogisticRegression(max_iter=1000 , C=128)
lr.fit(x_train,y_train)
lr.fit(x_test,y_test)

"""predict"""

x_pre =lr.predict(x_train)
y_pre =lr.predict(x_test)

"""acc_score"""

from sklearn.metrics import accuracy_score
accuracy_score(y_train, x_pre)

accuracy_score(y_test, y_pre)

"""plot_confusion_matrix"""

from sklearn.metrics import plot_confusion_matrix
plot_confusion_matrix(lr, x_test, y_test,
                     cmap=plt.cm.Blues,
                                 normalize='true')
plt.show();

"""svm model

build
"""

from sklearn.svm import SVC
from sklearn.metrics import accuracy_score
from sklearn.metrics import plot_confusion_matrix
model_svc = SVC(C=1.0, kernel='poly', degree=3, gamma=10)

"""fit"""

model_svc.fit(x_train, y_train)
model_svc.fit(x_test, y_test)

"""predict"""

pred_x = model_svc.predict(x_train)
pred_y = model_svc.predict(x_test)

"""score"""

accuracy_score(y_train, pred_x)

accuracy_score(y_test, pred_y)

"""plot"""

plot_confusion_matrix(model_svc, x_test, y_test,
                     cmap=plt.cm.Blues,
                                 normalize='true')
plt.show();

"""ANN model

build_func
"""

from keras.wrappers.scikit_learn import KerasClassifier
from sklearn.model_selection import cross_val_score
from keras.models import Sequential
from keras.layers import Dense
# model_func
def build_classifier():
    classifier = Sequential() # initialize neural network
    classifier.add(Dense(units = 64, kernel_initializer = 'uniform', activation = 'relu', input_dim = x_train.shape[1])) # firt hidden layer 
    classifier.add(Dense(units = 64, kernel_initializer = 'uniform', activation = 'relu'))
    classifier.add(Dense(units = 32, kernel_initializer = 'uniform', activation = 'relu'))
    classifier.add(Dense(units = 32, kernel_initializer = 'uniform', activation = 'relu'))
    classifier.add(Dense(units = 1, kernel_initializer = 'uniform', activation = 'sigmoid')) # last layer
    classifier.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])
    return classifier

"""summary"""

model = build_classifier()
model.summary()

"""train history"""

classifier = KerasClassifier(build_fn = build_classifier, epochs = 150)
x_history = classifier.fit(x_train,y_train,batch_size=50)

plt.plot(x_history.history['accuracy'], color='b', label="accuracies")
plt.title("Train Accuracies")
plt.xlabel("Number of Epochs")
plt.ylabel("Accuracy")
plt.legend()
plt.show()

"""test history"""

classifier = KerasClassifier(build_fn = build_classifier, epochs = 130)
y_history = classifier.fit(x_test,y_test,batch_size=50)

plt.plot(y_history.history['accuracy'], color='b', label="accuracies")
plt.title("Test Accuracies")
plt.xlabel("Number of Epochs")
plt.ylabel("Accuracy")
plt.legend()
plt.show()

"""plot Training loss and accuracy"""

N=150 #epoch
plt.plot(np.arange(0,N),x_history.history['loss'],label='Training_loss')
plt.plot(np.arange(0,N),x_history.history['accuracy'],label='Accuracy')
plt.title('Training loss and accuracy')
plt.xlabel('Epochs')
plt.legend(loc='right')